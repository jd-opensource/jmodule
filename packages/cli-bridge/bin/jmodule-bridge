#!/usr/bin/env node
const { Command } = require('commander');
const { version } = require('../package.json');
const program = new Command();
const path = require('node:path');
const resolveJmoduleConf = require('../utils/resolveJmoduleConf');
const resolveModuleArg = require('../utils/resolveModuleArg');
const resolvePackageJson = require('../utils/resolvePackageJson');
const { startServer } = require('../index.js');

program
    .name('jmodule-bridge')
    .description('JModule 集成调试工具')
    .version(version);

program
    .option('-H, --host <host>', '宿主应用服务')
    .option('-T, --target <targetServer>', '集成调试服务, eg: http://localhost:9000')
    .option('-P, --project-dir <projectDir>', '项目目录, 自动从 package.json, .jmodule.conf.js 下读取配置', './')
    .option('-M, --module <module>', '子应用配置, eg: http://localhost:3000?key=mychild', resolveModuleArg)
    .option('--open', '继承调试服务启动后自动打开浏览器');


// 解析、合并配置
function resolveAllConfig() {
    const args = program.opts();
    const projectDir = args.projectDir ? path.resolve(process.cwd(), args.projectDir) : undefined;
    const jmoduleConfig = resolveJmoduleConf(projectDir);
    const projectConfig = resolvePackageJson(projectDir);
    const jmoduleConfigPlatformLocalPort = jmoduleConfig.platformLocalPort
        ? `http://localhost:${jmoduleConfig.platformLocalPort}`
        : undefined;
    return {
        modulesConfig: {
            ...(projectConfig?.modulesConfig),
            ...(jmoduleConfig?.modulesConfig),
            ...(args.module || {}),
        },
        host: args.host || jmoduleConfig.platformServer || projectConfig.host,
        target: args.target || jmoduleConfigPlatformLocalPort || projectConfig.target,
        hostProxyTable: jmoduleConfig.platformProxyTable || {}, // 高级接口, 仅支持 .jmodule.conf.js
    };
}

program
    .command('config')
    .description('输出配置信息')
    .action(() => { console.log(resolveAllConfig()); });
program
    .command('start')
    .description('启动集成调试服务')
    .action(async () => {
        const args = program.opts();
        const options = await startServer(resolveAllConfig());
        console.log('集成服务已启动: ', `${options.host} => ${options.target}`);
        args.open && import('open').then((open) => open.default(options.target));
    });

program.parse();
